@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using API_Gateway_Client.DTOs
@using Newtonsoft.Json;
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject ILocalStorageService localStorage

<PageTitle>Home</PageTitle>


<h1>Oficinas disponibles:</h1>

@foreach (var i in offices)
{
    <tr>
        <td>
            <h3>
                <a href="@NavigationManager.ToAbsoluteUri("/clientMonitor/" + i.Identificator)">@i.Identificator</a>
            </h3>
        </td>
    </tr>
}




<RadzenButton Click="@ButtonClicked" Text="Actualizar Lista de Monitores"></RadzenButton>

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Header Auth: " + httpClient.DefaultRequestHeaders.Authorization);
        if(! await localStorage.ContainKeyAsync("token")) NavigationManager.NavigateTo("/login");
    }
    //we initialize the few things we're gonna use most importantly the HubConnection
    private HubConnection _connection;
    // static readonly HttpClient client = new HttpClient();
    IList<ClientOfficeDTO> offices = new List<ClientOfficeDTO>();

    //Cuando se inicializa el componente:
    protected override async Task OnInitializedAsync(){
        ReloadOfficeList();
    }

    //function that gets called when the only buttion in the page is pressed down
    void ButtonClicked(){
        ReloadOfficeList();
    }

    async void ReloadOfficeList(){
        //conseguimos todas las oficinas desde CommercialOffice
        try{
            //we ask the service McThingy from the API-Gateway to resolve the service discovery endpoint for us
            string response = await httpClient.GetStringAsync("/getAllOffices");

            offices = JsonConvert.DeserializeObject<List<ClientOfficeDTO>>(response);

            //Le avisamos al componente que se re-renderize dado que su estádo ha cambiado
            InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

}